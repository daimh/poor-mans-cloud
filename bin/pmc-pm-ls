#!/usr/bin/env bash
. /etc/pmc.conf
OPTS=$(getopt -o hv --long help,version -n "$(basename $0)" -- "$@")
eval set -- "$OPTS"
while [ $# -gt 0 ]
do
	case "$1" in
#HELPME_START
#NAME
#	pmc-pm-ls - list all PMs
#SYNOPSIS
#	pmc-pm-ls [OPTION]...
#EXAMPLE
#	pmc-pm-ls
#DESCRIPTION
		-h | --help) #display help and exit
			helpme ;;
		--version)	#display version and exit
			helpme "20220918" ;;
		-v) #verbose output
			VERBOSE="set -x"
			$VERBOSE
			shift ;;
		--)
			shift ;;
		*)
			break ;;
#AUTHOR
#	Manhong Dai, manhongdai@gmail.com
#COPYRIGHT
#	Copyright Â© 2022 Free Software Foundation, Inc. License GPLv3+: GNU
#	GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
#	This is free software: you are free to change and redistribute it.
#	There is NO WARRANTY, to the extent permitted by law.
#HELPME_END
	esac
done
if [ $# -ne 0 ]
then
	helpme "ERR-4002: use -h/--help"
fi
get_pm_vm_list | sort -t '	' -k 3,3 -k 1,1 | python -c "
import sys
def append_pm(lst, pm_list):
	rpt_virt = ['running', 'shutoff']
	rpt_drbd = ['UpToDate', 'Inconsistent']
	if len(lst) == 0: return
	mem_virt, cnt_virt, cnt_drbd, vm_list = {}, {}, {}, []
	for fs in lst:
		mem_virt[fs[1]] = mem_virt.get(fs[1], 0) + int(fs[5])
		cnt_virt[fs[1]] = cnt_virt.get(fs[1], 0) + 1
		if fs[3] != '':
			cnt_drbd[fs[3]] = cnt_drbd.get(fs[3], 0) + 1
		vm_list.append(fs[0])
	for k in cnt_virt.keys():
		if k not in rpt_virt: raise Exception('ERR-5001, contact developer to modify this program')
	for k in cnt_drbd.keys():
		if k not in rpt_drbd: raise Exception('ERR-5002, contact developer to modify this program')
	row = [lst[0][2]]
	for k in rpt_virt:
		row.append(str(cnt_virt.get(k, 0)))
		row.append('%d' % (mem_virt.get(k, 0)/1048576))
	for k in rpt_drbd: row.append(str(cnt_drbd.get(k, 0)))
	row.append(','.join(vm_list))
	pm_list.append(row)

def main():
	print('PM', 'RunningVmCnt', 'RunningVmMem(G)', 'ShutoffVMCnt', 'ShutoffVMMem(G)', 'UpToDateDRBD', 'InconsistentDRBD', 'VmList', sep='\t')
	pm, lst = None, []
	pm_list = []
	for ln in sys.stdin:
		fs = ln[:-1].split('\t')
		if fs[2] != pm:
			append_pm(lst, pm_list)
			pm, lst = fs[2], []
		lst.append(fs)
	append_pm(lst, pm_list)
	pm_set = set([row[0] for row in pm_list])
	for pm in '${PM_LIST[*]}'.split():
		if pm not in pm_set:
			pm_list.append([pm, '0', '0', '0', '0', '0', '0'])
	for row in sorted(pm_list):
		print('\t'.join(row))

if __name__ == '__main__':
	main()
" | column -t
